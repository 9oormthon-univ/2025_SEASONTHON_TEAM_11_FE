name: Frontend CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      BUILD_DIR: dist
      REMOTE_DIR: /var/www/youthjob
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT || 22 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Build (Vite → dist/)
        run: npm run build

      - name: Prepare release name
        id: prep
        run: echo "REL=release_${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Create temp dir on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            mkdir -p /tmp/${{ steps.prep.outputs.REL }}

      - name: Upload build files (dist → /tmp/REL)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          source: "${{ env.BUILD_DIR }}/*"          # dist/* (내용물)
          target: "/tmp/${{ steps.prep.outputs.REL }}/"

      - name: Activate release
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            set -e
            # rsync 보장
            if ! command -v rsync >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y rsync
            fi

            # 대상 디렉터리 보장 및 소유권(ubuntu) 유지
            sudo mkdir -p ${{ env.REMOTE_DIR }}
            sudo chown -R $USER:$USER ${{ env.REMOTE_DIR }}

            # dist '내용물'만 동기화 (마지막 슬래시 중요)
            rsync -a --delete "/tmp/${{ steps.prep.outputs.REL }}/" "${{ env.REMOTE_DIR }}/"

            # 권한(정적 서빙)
            find ${{ env.REMOTE_DIR }} -type d -exec chmod 755 {} \;
            find ${{ env.REMOTE_DIR }} -type f -exec chmod 644 {} \;

            # Nginx 적용
            sudo nginx -t && sudo systemctl reload nginx
